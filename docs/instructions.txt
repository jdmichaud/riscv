Reference: https://mark.theis.site/riscv/

Notation	Description
---------------	----------------------------------------------------------
pc		program counter
rd		integer register destination
rsN		integer register source N
imm		immediate operand value
offset		immediate program counter relative offset
ux(reg)		unsigned XLEN-bit integer (32-bit on RV32, 64-bit on RV64)
sx(reg)		signed XLEN-bit integer (32-bit on RV32, 64-bit on RV64)
uN(reg)		zero extended N-bit integer register value
sN(reg)		sign extended N-bit integer register value
uN[reg + imm]	unsigned N-bit memory reference
sN[reg + imm]	signed N-bit memory reference

Instruction format
-------------------------------------------------------------------------------------
31      30           25 24   20 19   15 14  12  11       8            7 6    0
	funct7 		rs2 	rs1 	funct3 	rd 			opcode R-type
	imm[11:0] 		rs1 	funct3 	rd 			opcode I-type
	imm[11:5] 	rs2 	rs1 	funct3 	imm[4:0]		opcode S-type
imm[12] imm[10:5] 	rs2 	rs1 	funct3 	imm[4:1] imm[11]	opcode B-type
<------------------ imm[31:12] -------------->	rd 			opcode U-type
imm[20] imm[10:1] 	imm[11] imm[19:12]	rd			opcode J-type
31      30           25 24   20 19   15 14  12  11       8            7 6    0

Name	Args		Format	Description
-------	---------------	-------	---------------------------------------	---------------------------------
LUI	rd,imm		U	Load Upper Immediate			rd ← imm
AUIPC	rd,offset 	U	Add Upper Immediate to PC		rd ← pc + offset
JAL	rd,offset 	J	Jump and Link				rd ← pc + length(inst)
									pc ← pc + offset
JALR 	rd,rs1,offset 	I	Jump and Link Register			rd ← pc + length(inst)
									pc ← (rs1 + offset) ∧ -2
BEQ 	rs1,rs2,offset 	B	Branch Equal				if rs1 = rs2 then pc ← pc + offset
BNE 	rs1,rs2,offset 	B	Branch Not Equal			if rs1 ≠ rs2 then pc ← pc + offset
BLT 	rs1,rs2,offset 	B	Branch Less Than			if rs1 < rs2 then pc ← pc + offset
BGE 	rs1,rs2,offset 	B	Branch Greater than Equal		if rs1 ≥ rs2 then pc ← pc + offset
BLTU 	rs1,rs2,offset 	B	Branch Less Than Unsigned		if rs1 < rs2 then pc ← pc + offset
BGEU 	rs1,rs2,offset 	B	Branch Greater than Equal Unsigned	if rs1 ≥ rs2 then pc ← pc + offset
LB 	rd,offset(rs1) 	I	Load Byte				rd ← s8[rs1 + offset]
LH 	rd,offset(rs1) 	I	Load Half				rd ← s16[rs1 + offset]
LW 	rd,offset(rs1) 	I	Load Word				rd ← s32[rs1 + offset]
LBU 	rd,offset(rs1) 	I	Load Byte Unsigned			rd ← u8[rs1 + offset]
LHU 	rd,offset(rs1) 	I	Load Half Unsigned			rd ← u16[rs1 + offset]
SB 	rs2,offset(rs1) S	Store Byte				u8[rs1 + offset] ← rs2
SH 	rs2,offset(rs1) S	Store Half				u16[rs1 + offset] ← rs2
SW 	rs2,offset(rs1) S	Store Word				u32[rs1 + offset] ← rs2
ADDI 	rd,rs1,imm 	I	Add Immediate				rd ← rs1 + sx(imm)
SLTI 	rd,rs1,imm 	I	Set Less Than Immediate			rd ← sx(rs1) < sx(imm)
SLTIU 	rd,rs1,imm 	I	Set Less Than Immediate Unsigned	rd ← ux(rs1) < ux(imm)
XORI 	rd,rs1,imm 	I	Xor Immediate				rd ← ux(rs1) ⊕ ux(imm)
ORI 	rd,rs1,imm 	I	Or Immediate				rd ← ux(rs1) ∨ ux(imm)
ANDI 	rd,rs1,imm 	I	And Immediate				rd ← ux(rs1) ∧ ux(imm)
SLLI 	rd,rs1,imm 	I	Shift Left Logical Immediate		rd ← ux(rs1) « ux(imm)
SRLI 	rd,rs1,imm 	I	Shift Right Logical Immediate		rd ← ux(rs1) » ux(imm)
SRAI 	rd,rs1,imm 	I	Shift Right Arithmetic Immediate 	rd ← sx(rs1) » ux(imm)
ADD 	rd,rs1,rs2 	R	Add					rd ← sx(rs1) + sx(rs2)
SUB 	rd,rs1,rs2 	R	Subtract				rd ← sx(rs1) - sx(rs2)
SLL 	rd,rs1,rs2 	R	Shift Left Logical			rd ← ux(rs1) « rs2
SLT 	rd,rs1,rs2 	R	Set Less Than				rd ← sx(rs1) < sx(rs2)
SLTU 	rd,rs1,rs2 	R	Set Less Than Unsigned			rd ← ux(rs1) < ux(rs2)
XOR 	rd,rs1,rs2 	R	Xor					rd ← ux(rs1) ⊕ ux(rs2)
SRL 	rd,rs1,rs2 	R	Shift Right Logical			rd ← ux(rs1) » rs2
SRA 	rd,rs1,rs2 	R	Shift Right Arithmetic			rd ← sx(rs1) » rs2
OR 	rd,rs1,rs2 	R	Or					rd ← ux(rs1) ∨ ux(rs2)
AND 	rd,rs1,rs2 	R	And					rd ← ux(rs1) ∧ ux(rs2)
FENCE 	pred,succ 	I	Fence
FENCE.I 		I	Fence Instruction

Instruction layout
------------------------------------------------------------------------
imm[31:12] 				rd 		0110111	LUI
imm[31:12] 				rd 		0010111	AUIPC
imm[20|10:1|11|19:12] 			rd 		1101111	JAL
imm[11:0]		rs1 	000 	rd 		1100111	JALR
imm[12|10:5]	rs2 	rs1 	000 	imm[4:1|11] 	1100011	BEQ
imm[12|10:5]	rs2	rs1	001	imm[4:1|11] 	1100011	BNE
imm[12|10:5]	rs2	rs1	100	imm[4:1|11] 	1100011	BLT
imm[12|10:5]	rs2	rs1	101	imm[4:1|11] 	1100011	BGE
imm[12|10:5]	rs2	rs1	110	imm[4:1|11] 	1100011	BLTU
imm[12|10:5]	rs2	rs1	111	imm[4:1|11] 	1100011	BGEU
imm[11:0] 		rs1 	000 	rd		0000011	LB
imm[11:0]		rs1	001	rd		0000011 LH
imm[11:0]		rs1	010	rd		0000011 LW
imm[11:0]		rs1	100	rd		0000011 LBU
imm[11:0]		rs1	101	rd		0000011 LHU
imm[11:5]	rs2	rs1	000	imm[4:0]	0100011 SB
imm[11:5]	rs2	rs1	001	imm[4:0]	0100011 SH
imm[11:5]	rs2	rs1	010	imm[4:0]	0100011 SW
imm[11:0]		rs1	000	rd		0010011 ADDI
imm[11:0]		rs1	010	rd		0010011 SLTI
imm[11:0]		rs1	011	rd		0010011 SLTIU
imm[11:0]		rs1	100	rd		0010011 XORI
imm[11:0]		rs1	110	rd		0010011 ORI
imm[11:0]		rs1	111	rd		0010011 ANDI
0000000 	shamt	rs1	001	rd		0010011	SLLI
0000000 	shamt	rs1	101	rd		0010011	SRLI
0100000 	shamt	rs1	101	rd		0010011	SRAI
0000000		rs2	rs1	000	rd 		0110011 ADD
0100000		rs2	rs1	000	rd 		0110011 SUB
0000000		rs2	rs1	001	rd 		0110011 SLL
0000000		rs2	rs1	010	rd 		0110011 SLT
0000000		rs2	rs1	011	rd 		0110011 SLTU
0000000		rs2	rs1	100	rd 		0110011 XOR
0000000		rs2	rs1	101	rd 		0110011 SRL
0100000		rs2	rs1	101	rd 		0110011 SRA
0000000		rs2	rs1	110	rd 		0110011 OR
0000000		rs2	rs1	111	rd 		0110011 AND
fm 	pred 	succ 	rs1 	000 	rd		0001111 FENCE
imm[11:0]		 	001 	rd		0001111 FENCE.I
000000000000 	00000 	000 	00000 			1110011 ECALL
000000000001 	00000 	000 	00000 			1110011 EBREAK
